generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum ReservationStatus {
  APPROVED
  PENDING
  REJECTED
}

model User {
  id            String   @id @default(cuid(2))
  firstname     String
  lastName      String
  email         String   @unique
  password      String?
  phoneNumber   String?
  profileImage  String?
  role          Role     @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isVerified    Boolean  @default(false)
  verifiedToken Token?
  userAgent     String   @default("regular")

  Reservation Reservation[]
}

model Token {
  id         String   @id @default(cuid(2))
  tokenValue String   @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model Object {
  id          String   @id @default(cuid())
  name        String
  location    String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workTimeFrom String
  workTimeTo  String

  unavailablePeriods  UnavailablePeriod[]

  Reservation Reservation[]
}

model UnavailablePeriod {
  id          String   @id @default(cuid(2))
  objectId  String
  object Object  @relation(fields: [objectId], references: [id])
  startDate DateTime
  endDate   DateTime

  @@unique([objectId, startDate, endDate])
}

model Reservation {
  id          String   @id @default(cuid())
  objectId  String
  object Object  @relation(fields: [objectId], references: [id])
  userId String
  user       User     @relation(fields: [userId], references: [id])
  startDate DateTime
  endDate   DateTime
  status    ReservationStatus @default(PENDING)


  @@unique([objectId, startDate, endDate])
}
